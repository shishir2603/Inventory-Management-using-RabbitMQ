version: "3.8"

volumes:
  mongodata:

networks:
  prodcon_network:
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "15672:15672"  # For RabbitMQ management interface
      - "5672:5672"    # For RabbitMQ message broker
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - prodcon_network

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    restart: always
    logging:
      driver: none
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - prodcon_network

  producer:
    build: ./Producer
    ports:
      - "5000:5000"  # For Flask server
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
    networks:
      - prodcon_network

  consumer_health_check:
    build: ./Health_check
    depends_on:
      producer:
        condition: service_started
    networks:
      - prodcon_network

  consumer_insert_record:
    build: ./Item_creation
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - prodcon_network

  consumer_delete_record:
    build: ./Stock_management
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - prodcon_network

  consumer_read_database:
    build: ./Order_processing
    command: python3 order_processing.py
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - prodcon_network
